# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:14:12+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    Aquifer,
    AquiferCodesDemandGetResponse,
    AquiferCodesMaterialsGetResponse,
    AquiferCodesProductivityGetResponse,
    AquiferCodesQualityConcernsGetResponse,
    AquiferCodesSubtypesGetResponse,
    AquiferCodesVulnerabilityGetResponse,
    AquiferCodesWaterUseGetResponse,
    AquifersAquiferIdFilesGetResponse,
    AquifersGetResponse,
    AquifersNamesGetResponse,
    CitiesDrillersGetResponse,
    CitiesInstallersGetResponse,
    DrillersGetResponse,
    DrillersNamesGetResponse,
    DrillersPersonGuidFilesGetResponse,
    SurveysGetResponse,
    WellDetail,
    WellsGetResponse,
    WellsTagFilesGetResponse,
    WellsTagsGetResponse,
)

app = MCPProxy(
    contact={'email': 'groundwater@gov.bc.ca'},
    description='The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.',
    license={
        'name': 'Open Government License - British Columbia',
        'url': 'https://www2.gov.bc.ca/gov/content?id=A519A56BC2BF44E4A008B33FCF527F61',
    },
    termsOfService='http://www2.gov.bc.ca/gov/content?id=D1EE0A405E584363B205CD4353E02C88',
    title='Groundwater Wells, Aquifers and Registry API',
    version='v1',
    servers=[{'url': 'https://apps.nrs.gov.bc.ca/gwells/api/v1/'}],
)


@app.get(
    '/aquifer-codes/demand/',
    description=""" return a list of aquifer demand codes """,
    tags=['configuration_settings'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def aquifer_codes_demand_list(
    limit: Optional[int] = None, offset: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aquifer-codes/materials/',
    description=""" return a list of aquifer material codes """,
    tags=['well_operations', 'survey_operations'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def aquifer_codes_materials_list(
    limit: Optional[int] = None, offset: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aquifer-codes/productivity/',
    description=""" return a list of aquifer productivity codes """,
    tags=[
        'aquifer_operations',
        'driller_operations',
        'well_operations',
        'survey_operations',
        'configuration_settings',
    ],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def aquifer_codes_productivity_list(
    limit: Optional[int] = None, offset: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aquifer-codes/quality-concerns/',
    description=""" return a list of quality concern codes """,
    tags=['configuration_settings'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def aquifer_codes_quality_concerns_list(
    limit: Optional[int] = None, offset: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aquifer-codes/subtypes/',
    description=""" return a list of aquifer subtype codes """,
    tags=['configuration_settings'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def aquifer_codes_subtypes_list(
    limit: Optional[int] = None, offset: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aquifer-codes/vulnerability/',
    description=""" return a list of aquifer vulnerability codes """,
    tags=['configuration_settings'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def aquifer_codes_vulnerability_list(
    limit: Optional[int] = None, offset: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aquifer-codes/water-use/',
    description=""" return a list of water use codes """,
    tags=['configuration_settings'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def aquifer_codes_water_use_list(
    limit: Optional[int] = None, offset: Optional[int] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aquifers/',
    description=""" return a list of aquifers """,
    tags=['aquifer_operations'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def aquifers_list(
    aquifer_id: Optional[float] = None,
    ordering: Optional[str] = None,
    search: Optional[str] = None,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aquifers/names/',
    description=""" List all aquifers in a simplified format """,
    tags=['aquifer_operations', 'well_operations'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def aquifers_names_list(search: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aquifers/{aquifer_id}/',
    description=""" return details of aquifers """,
    tags=['aquifer_operations'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def aquifers_read(aquifer_id: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aquifers/{aquifer_id}/files',
    description=""" list files found for the aquifer identified in the uri """,
    tags=['aquifer_operations'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def aquifers_files_list(aquifer_id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cities/drillers/',
    description=""" returns a list of cities with a qualified, registered operator (driller or installer) """,
    tags=['configuration_settings'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def cities_drillers_list():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cities/installers/',
    description=""" returns a list of cities with a qualified, registered operator (driller or installer) """,
    tags=[
        'aquifer_operations',
        'driller_operations',
        'well_operations',
        'survey_operations',
        'configuration_settings',
    ],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def cities_installers_list():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/config',
    description=""" serves general configuration """,
    tags=[
        'aquifer_operations',
        'driller_operations',
        'well_operations',
        'survey_operations',
        'configuration_settings',
    ],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def config_list():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/drillers/',
    description=""" Returns a list of all person records """,
    tags=['configuration_settings'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def drillers_list(
    search: Optional[str] = None,
    ordering: Optional[str] = None,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/drillers/names/',
    description=""" Search for a person in the Register """,
    tags=['aquifer_operations'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def drillers_names_list(search: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/drillers/{person_guid}/files/',
    description=""" list files found for the aquifer identified in the uri """,
    tags=['configuration_settings'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def drillers_files_list(person_guid: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/keycloak',
    description=""" serves keycloak config """,
    tags=['configuration_settings'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def keycloak_list():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/submissions/options/',
    description=""" Options required for submitting activity report forms """,
    tags=[
        'aquifer_operations',
        'driller_operations',
        'well_operations',
        'survey_operations',
        'configuration_settings',
    ],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def submissions_options_list():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/surveys/',
    description=""" returns a list of active surveys """,
    tags=['configuration_settings'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def surveys_list():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/wells/',
    description=""" returns a list of wells """,
    tags=['configuration_settings'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def wells_list(limit: Optional[int] = None, offset: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/wells/tags/',
    description=""" seach for wells by tag or owner """,
    tags=['configuration_settings'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def wells_tags_list(search: Optional[str] = None, ordering: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/wells/{tag}/files',
    description=""" list files found for the well identified in the uri """,
    tags=['well_operations'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def wells_files_list(tag: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/wells/{well_tag_number}',
    description=""" Return well detail.
This view is open to all, and has no permissions. """,
    tags=['well_operations'],
    security=[
        APIKeyHeader(name="JWT"),
    ],
)
def wells_read(well_tag_number: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
